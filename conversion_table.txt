# Define como as instruções do assembly inventado devem ser convertidas
# para o assembly x86 NASM
ADD @rot {
    ADD ebx, [@rot]
}
SUB @rot {
    SUB ebx, [@rot]
}

# Confirmar com o prof que esse mult e div são suficientes
MULT @rot {
    MOV eax, ebx
    IMULT DWORD [@rot]
    JO _OVERFLOW
    MOV ebx, eax
}
DIV @rot {
    MOV eax, ebx
    CDQ
    IDIV DWORD [@rot]
    MOV ebx, eax
}

JMP @rot {
    JMP @rot
}
JMPN @rot {
    CMP ebx, 0
    JL @rot
}
JMPP @rot {
    CMP ebx, 0
    JG @rot
}
JMPZ @rot {
    CMP ebx, 0
    JZ @rot
}

LOAD @rot {
    MOV ebx, [@rot]
}
STORE @rot {
    MOV DWORD [@rot], ebx
}
COPY @a, @b {
    MOV ebx, [@a]
    MOV DWORD [@b], ebx
}

INPUT @rot {
    PUSH DWORD @rot
    CALL _LERINTEIRO
}
OUTPUT @rot {
    PUSH DWORD @rot
    CALL _ESCREVERINTEIRO
}
C_INPUT @rot {
    PUSH DWORD @rot
    CALL _LERCHAR
}
C_OUTPUT @rot {
    PUSH DWORD @rot
    CALL _ESCREVERCHAR
}
S_INPUT @rot, @size {
    PUSH DWORD @size
    PUSH DWORD @rot
    CALL _LERSTRING
}
S_OUTPUT @rot, @size {
    PUSH DWORD @size
    PUSH DWORD @rot
    CALL _ESCREVERSTRING
}

STOP {
    MOV eax, 1
    MOV ebx, 0
    INT 80h
}

SPACE @num {
    (BSS)
    RESD @num
}
CONST @val {
    (DATA)
    DD @val
}